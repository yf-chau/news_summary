import os
import time
import json
import markdown
from datetime import datetime
from playwright.sync_api import (
    sync_playwright,
    TimeoutError as PlaywrightTimeoutError,
    expect,
)
from locators import (
    LOGIN_EMAIL_INPUT_SELECTOR,
    LOGIN_CONTINUE_BUTTON_SELECTOR,
    LOGIN_PASSWORD_INPUT_SELECTOR,
    LOGIN_SIGN_IN_BUTTON_SELECTOR,
    LOGIN_ERROR_MESSAGE_SELECTOR,
    PASSWORD_LOGIN_LINK_SELECTOR,
    DASHBOARD_INDICATOR_SELECTOR,
    NEW_POST_BUTTON_SELECTOR,
    NEW_TEXT_POST_BUTTON_SELECTOR,
    POST_TITLE_INPUT_SELECTOR,
    POST_CONTENT_EDITOR_SELECTOR,
    POST_CONTINUE_BUTTON_SELECTOR,
    SEND_BUTTON_SELECTOR,
)

# --- Configuration ---
# Load credentials securely from environment variables
SUBSTACK_EMAIL = os.environ.get("SUBSTACK_EMAIL")
SUBSTACK_PASSWORD = os.environ.get("SUBSTACK_PASSWORD")

# --- Content (Generated by your LLM) ---
TITLE = f"{datetime.now().strftime('%B %d, %Y')}Daily News Summary"
CONTENT = """
# Daily News Summary

Today we launched **Playwright** automation for Substack login with password flow.

- This summary uses `code` formatting for inline highlights.
- It also supports *italic* text and **bold** emphasis.

> “Automation saves time and reduces errors.” – Anonymous

For more details, visit [Substack](https://substack.com).
"""


def load_cookies(context, cookies_path="substack_cookies_test.json"):
    """Load cookies from a JSON mapping into the given browser context."""
    if not os.path.exists(cookies_path):
        print(f"No cookie file found at {cookies_path}, skipping cookies load.")
        return

    with open(cookies_path, "r") as f:
        cookie_dict = json.load(f)

    cookies = []
    for name, value in cookie_dict.items():
        cookies.append(
            {
                "name": name,
                "value": value,
                "domain": ".substack.com",
                "path": "/",
            }
        )

    context.add_cookies(cookies)
    print(f"Loaded {len(cookies)} cookies from {cookies_path}")


def perform_login(page):
    # click on the "Sign in with email" link
    print("Clicking 'Sign in with password' link (if applicable)...")
    password_login_link = page.locator(PASSWORD_LOGIN_LINK_SELECTOR)
    if password_login_link.is_visible(timeout=5000):
        password_login_link.click()

    print(f"Entering email: {SUBSTACK_EMAIL}")
    email_input = page.locator(LOGIN_EMAIL_INPUT_SELECTOR)
    expect(email_input).to_be_visible(timeout=15000)
    email_input.fill(SUBSTACK_EMAIL)

    # Check if clicking "Continue" reveals password field or if it's already there
    # Scenario 1: Password field appears after clicking Continue
    print("Clicking 'Continue' (if applicable)...")
    continue_button = page.locator(LOGIN_CONTINUE_BUTTON_SELECTOR)
    if continue_button.is_visible(timeout=5000):  # Check if continue button exists
        expect(continue_button).to_be_enabled()
        continue_button.click()
        # Wait a moment for potential password field to appear
        time.sleep(1)
    else:
        print("'Continue' button not found or not needed, proceeding...")

    print("Entering password...")
    password_input = page.locator(LOGIN_PASSWORD_INPUT_SELECTOR)
    # Add extra wait here in case the password field loads slower
    expect(password_input).to_be_visible(timeout=15000)
    password_input.fill(SUBSTACK_PASSWORD)

    # Move the earlier continue code here
    # Check if clicking "Continue" reveals password field or if it's already there
    # Scenario 1: Password field appears after clicking Continue
    print("Clicking 'Continue' (if applicable)...")
    continue_button = page.locator(LOGIN_CONTINUE_BUTTON_SELECTOR)
    if continue_button.is_visible(timeout=5000):  # Check if continue button exists
        expect(continue_button).to_be_enabled()
        continue_button.click()
        # Wait a moment for potential password field to appear
        time.sleep(1)
    else:
        print("'Continue' button not found or not needed, proceeding...")

    print("Waiting for login confirmation (Dashboard indicator)...")
    # Wait for navigation to complete and dashboard element to appear
    # Important: If login fails (bad password, CAPTCHA), this will likely time out.
    try:
        logged_in_element = page.locator(DASHBOARD_INDICATOR_SELECTOR)
        # Use a longer timeout as login redirects can take time
        expect(logged_in_element).to_be_visible(timeout=30000)  # Wait up to 30s
        print("Login successful (Dashboard element detected).")
    except PlaywrightTimeoutError:
        print("\nError: Timed out waiting for dashboard element after login.")
        # Check for common failure indicators
        try:
            error_msg = page.locator(LOGIN_ERROR_MESSAGE_SELECTOR).text_content(
                timeout=2000
            )
            print(f"Possible login error detected: {error_msg}")
        except PlaywrightTimeoutError:
            print("Could not find dashboard element OR specific error message.")
            print(
                "Login may have failed due to invalid credentials, CAPTCHA, 2FA, or UI changes."
            )
        raise  # Re-raise the timeout error to stop execution


def inject_markdown_to_editor(page, editor_selector, markdown_text):
    """Convert markdown to HTML and inject into the ProseMirror editor."""
    html = markdown.markdown(markdown_text)
    editor = page.locator(editor_selector)
    expect(editor).to_be_visible(timeout=15000)
    editor.evaluate("(node, html) => node.innerHTML = html", html)
    print("Injected HTML content into editor.")


def launch_browser_context(playwright):
    """Start browser and context, load cookies."""
    browser = playwright.chromium.launch(headless=False, slow_mo=50)
    context = browser.new_context()
    load_cookies(context)
    return browser, context


def init_page(context):
    """Open a new page."""
    return context.new_page()


def navigate_to_dashboard(page):
    """Step 1: Navigate to Substack dashboard page."""
    print("Navigating to Dashboard...")
    page.goto(
        "https://hknewsdigest1.substack.com/publish/home",
        wait_until="domcontentloaded",
    )


def is_logged_in(page):
    """Step 2: Check if dashboard indicator is visible."""
    return page.locator(NEW_POST_BUTTON_SELECTOR).is_visible(timeout=15000)


def create_draft(page, title, content):
    """Steps 3 & 4: Navigate to new post page and inject content."""
    print("Navigating to create new post...")
    new_post_button = page.locator(NEW_POST_BUTTON_SELECTOR)
    expect(new_post_button).to_be_visible(timeout=15000)
    new_post_button.click()

    new_text_post_button = page.locator(NEW_TEXT_POST_BUTTON_SELECTOR)
    expect(new_text_post_button).to_be_visible(timeout=15000)
    new_text_post_button.click()

    print("Waiting for editor to load...")
    title_input = page.locator(POST_TITLE_INPUT_SELECTOR)
    expect(title_input).to_be_visible(timeout=20000)

    print(f"Entering title: {title}")
    title_input.fill(title)

    print("Injecting formatted HTML content into editor...")
    inject_markdown_to_editor(page, POST_CONTENT_EDITOR_SELECTOR, content)
    print("Content entered. Waiting briefly to allow autosave...")
    time.sleep(5)
    print("\nProcess Complete. Draft should be created in Substack.")
    print("Please manually review and publish the draft via the Substack website.")


def publish_draft(page):
    print("Clicking 'Continue' button...")
    continue_button = page.locator(POST_CONTINUE_BUTTON_SELECTOR)
    expect(continue_button).to_be_visible(timeout=50000)
    continue_button.click()

    print("Waiting for publish confirmation (Send button)...")
    send_button = page.locator(SEND_BUTTON_SELECTOR)
    expect(send_button).to_be_visible(timeout=50000)
    send_button.click()
    print("Draft published successfully.")


def post_substack_draft(title=TITLE, content=CONTENT):
    if not SUBSTACK_EMAIL or not SUBSTACK_PASSWORD:
        print(
            "Error: SUBSTACK_EMAIL and SUBSTACK_PASSWORD environment variables must be set."
        )
        return

    with sync_playwright() as p:
        browser, context = launch_browser_context(p)
        page = init_page(context)

        try:
            navigate_to_dashboard(page)
            if not is_logged_in(page):
                perform_login(page)
            subtitle = f"本新聞摘要由 {MODEL} 自動生成。"
            create_draft(page, title, content)
            publish_draft(page)

        except PlaywrightTimeoutError as e:
            print(f"\nPlaywright Error: Timed out waiting for an element: {e}")
            print("The Substack UI might have changed, or the element took too long.")
            print("Check if a CAPTCHA appeared.")
            page.screenshot(path="playwright_error_screenshot.png")
            print("Screenshot saved as playwright_error_screenshot.png")
        except Exception as e:
            print(f"\nAn unexpected error occurred: {e}")
            page.screenshot(path="playwright_error_screenshot.png")
            print("Screenshot saved as playwright_error_screenshot.png")
        finally:
            time.sleep(5)
            print("Closing browser.")
            browser.close()


# --- Run the Automation ---
if __name__ == "__main__":
    post_substack_draft()
